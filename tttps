## choosing wrong location changes term

$file = Import-Csv "G:\everyone\M-BMD18-7\TTTN.csv" 
$gameList =@();
$activeGame =@();
$errorheader=""

function find-games{
 $global:gameList=@();
cls
write-host "Availible games"

 
# Pass in the file and add each one to the list. 
$file | ForEach-Object {
# Check to see if the user querying has an active game. 
  if (($_.P1N -eq $env:USERNAME -or $_.p2n -eq $env:USERNAME) -and $_.Running -eq "1"){
  $global:gameList+= $_
    if ( $_.p2n -eq ""){
    # If they are the host of a game with no opponent
   $_.GN +"- Waiting for opponent"
   }else{
    # Otherwise display the names of both
   $_.GN +"- " + $_.p1N +" VS " + $_.p2N
   }
   $found=$true
   $global:gameList += $_.GN
 }
}
#If there's more than one display the list. 
if ($found) {Select-Game }else{
#otherwise Go back to main menu
 $errorheader= "No games found try again"
 new-game
 #next steps would be to create a game, or find games with no p2.
  
}

 

}
 
 
 #---- select game
 function Select-Game{

 $global:gameselect= read-host "Choose a game or type "Quit" "
  
 $global:gameList | ForEach-Object { if ( $gameselect -eq $_.GN -or $gameSelect -eq "Quit" ){ 
 #if game is valid then set it to the active game.
 $global:activeGame = $_;

   display-board; break;} }
 # if it doesn't find a valid game. 
  cls
 write-host "INVALID CHOICE select again.  "
  
 find-games
  
 }

 

 function get-turn {
 # if it's an odd turn then it's player 1's turn otherwise it's player 2's turn 
 if ( $activeGame.turn %2 -eq 1){
 return $activeGame.P1.ToString()
 }else{
 return $activeGame.P2.ToString()
 }

 }

  function display-board {
 cls
 write-host ""
 write-host ("`t`t"+ $activeGame.TL +"`t|`t"+ $activeGame.TM +"`t|`t"+ $activeGame.TR)
 write-host ("`t`t"+$activeGame.ML +"`t|`t"+ $activeGame.M +"`t|`t"+ $activeGame.MR)
 write-host ("`t`t"+$activeGame.BL +"`t|`t"+ $activeGame.BM +"`t|`t"+ $activeGame.BR)
 write-host ""
 write-host "`t`t`t`t"(get-turn)"'s Turn"
 place-marker
 }





 

 function check-Winner{
  return (
         ((($activeGame.tl -eq $activeGame.ml) -and ($activeGame.ml -eq $activeGame.bl)) -or 
         (($activeGame.tm -eq $activeGame.M) -and ($activeGame.M -eq $activeGame.bm)) -or 
         (($activeGame.tr -eq $activeGame.mr) -and ($activeGame.mr -eq $activeGame.bR))  -or
         #check Horizontals
         (($activeGame.tl -eq $activeGame.TM) -and ($activeGame.TM -eq $activeGame.TR)) -or 
         (($activeGame.ml -eq $activeGame.M) -and ($activeGame.M -eq $activeGame.MR)) -or 
         (($activeGame.bl -eq $activeGame.bM) -and ($activeGame.bM -eq $activeGame.bR)) -or
         #Check Diagonals
         (($activeGame.tl -eq $activeGame.M) -and ($activeGame.M -eq $activeGame.br)) -or 
         (($activeGame.tR -eq $activeGame.M) -and ($activeGame.M -eq $activeGame.bL))  -or
         #Check Draw
         ([int]$global:activeGame.turn -eq 9)))

 
 }

 

 

  function save-data{
 write-host "Saving data"
 }

 function valid-placeholder($placeHolder){
 $result = $false
switch ($placeHolder){
  1 { if ($activeGame.bl -eq $placeHolder)  return $true}
  2 { if ($activeGame.bm -eq $placeHolder)  return $true}
  3 { if ($activeGame.br -eq $placeHolder)  return $true}
  4 { if ($activeGame.ml -eq $placeHolder)  return $true}
  5 { if ($activeGame.m  -eq $placeHolder)  return $true}
  6 { if ($activeGame.mr -eq $placeHolder)  return $true}
  7 { if ($activeGame.tl -eq $placeHolder)  return $true}
  8 { if ($activeGame.tm -eq $placeHolder)  return $true}
  9 { if ($activeGame.tr -eq $placeHolder)  return $true}
  default {return $false;}
 
  
} 

return $result




 }





 function place-marker {
 #If there is no winner Then 
 if ((check-Winner) -eq $false ){
  # Get users input
  $placeMarker= read-host "Choose an availible location. "
  #Validate Users input
if   (valid-placeholder($placeMarker)){
switch ($placeMarker){
  1 {$activeGame.bl = (get-turn);break}
  2 {$activeGame.bm = (get-turn);break}
  3 {$activeGame.br = (get-turn);break}
  4 {$activeGame.ml = (get-turn);break}
  5 {$activeGame.m  = (get-turn);break}
  6 {$activeGame.mr = (get-turn);break}
  7 {$activeGame.tl = (get-turn);break}
  8 {$activeGame.tm = (get-turn);break}
  9 {$activeGame.tr = (get-turn);break}
  default { write-host "other";break;}
}
 
#valid-placeholder($placeMarker) ;break}else{ display-board; write-host "Already in use Try again.";  place-marker;break}}
}
 
#Increment the turn count
$global:activeGame.turn=[int]$global:activeGame.turn+1
#save the stuff back to the csv
save-data
#display the new board. 
 display-board
 





 }else{
 
 write-host "Game Over"
 $again = read-host "Do you want to play again? (y/n)"
 if ($again -eq "y"){ main-menu}else{write-host "Thanks for playing"}
 }
 }
  
  function main-menu {
  cls
write-host "1: New game"
write-host "2: Join game"
write-host "3: Quit"
write-host $errorheader;$errorheader="";
switch (read-host "Select an option:"){
  1 {new-game;break}
  2 {find-games;break}
  3 {exit;break}
  
}

}
  
 main-menu
